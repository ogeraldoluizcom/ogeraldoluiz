name: CI/CD Pipeline
run-name: Pipeline CI/CD executed by ${{ github.actor }} in ${{ github.run_number }}

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'Environment name'
        required: true
        type: string
      environment-url:
        description: 'Environment URL'
        required: true
        type: string
      K8S_NAMESPACE:
        description: 'Kubernetes Namespace'
        required: true
        type: string

jobs:
  deploy:
    name: Deploy in Kubernetes
    runs-on: ubuntu-latest

    # Environment Variables
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ inputs.environment-url }}

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

        # Set Context
      - name: Apply Kubernetes Context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_KUBECONFIG }}

      - name: Update Deployment
        run: |
          sed -i 's|namespace: development|namespace: ${{ inputs.K8S_NAMESPACE }}|g' k8s/deployment.yaml
          sed -i 's|namespace: development|namespace: ${{ inputs.K8S_NAMESPACE }}|g' k8s/service.yaml
          sed -i 's|namespace: development|namespace: ${{ inputs.K8S_NAMESPACE }}|g' k8s/ingress.yaml
          sed -i 's|host: development.ogeraldoluiz.com|host: ${{ inputs.environment-url }}|g' k8s/ingress.yaml
          sed -i 's|https://||g' k8s/ingress.yaml

      - name: Create Namespace if Not Exists
        run: |
          kubectl get namespace ${{ inputs.K8S_NAMESPACE }} || kubectl create namespace ${{ inputs.K8S_NAMESPACE }}

        # run: |
        #   sed -i 's/host: development.ogeraldoluiz.com/host:${{ vars.BASE_URL }}/g' k8s/deployment.yaml

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v5
        with:
          namespace: ${{ inputs.K8S_NAMESPACE }}
          manifests: |
            k8s/deployment.yaml
            k8s/service.yaml
            k8s/ingress.yaml
          images: geraldobl58/ogeraldoluiz:v${{ github.run_number }}

      - name: Apply ClusterIssuer for Let's Encrypt
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-staging
          spec:
            acme:
              email: geraldobl58@gmail.com
              server: https://acme-staging-v02.api.letsencrypt.org/directory
              privateKeySecretRef:
                name: letsencrypt-staging
              solvers:
              - http01:
                  ingress:
                    class: nginx
          EOF

          sleep 30

      - name: Verify Certificate
        run: |
          echo "Verifying certificate..."
          kubectl get certificate -n ${{ inputs.K8S_NAMESPACE }}
          kubectl describe certificate tls-cert-${{ inputs.K8S_NAMESPACE }} -n ${{ inputs.K8S_NAMESPACE }}
          echo "If certificate is not ready, it may take a few minutes to be issued."
