name: CI/CD Pipeline
run-name: Pipeline CI/CD executed by ${{ github.actor }} in ${{ github.run_number }}

on:
  push:
    branches:
      - develop # Deploy em development
      - release/** # Deploy em staging
      - main # Deploy em produ√ß√£o (idealmente manual)
  # pull_request:
  #   branches:
  #     - develop
  #     - release/**
  #     - main
  workflow_dispatch: # Permite disparo manual (√∫til para produ√ß√£o)

permissions:
  contents: write

jobs:
  # Continuous Integration (CI)
  CI:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup Node.js environment
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Cache Node.js dependencies
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Build the application
      - name: Build
        run: npm run build

      # Run linting
      - name: Linting
        run: npm run lint

  # Test
  Tests:
    needs: [CI]
    uses: ./.github/workflows/test.yml
    secrets: inherit

  # Continuous Deployment (CD)
  CD:
    needs: [Tests]
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup DockerHub credentials
      - name: Setup Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: |
            geraldobl58/ogeraldoluiz:v${{ github.run_number }}
            geraldobl58/ogeraldoluiz:latest

  # Deploy
  deploy-development:
    if: github.ref == 'refs/heads/develop'
    needs: [CD]
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment-name: development
      environment-url: https://development.ogeraldoluiz.com
      K8S_NAMESPACE: development

  deploy-staging:
    if: startsWith(github.ref, 'refs/heads/release/')
    needs: [CD]
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment-name: staging
      environment-url: https://staging.ogeraldoluiz.com
      K8S_NAMESPACE: staging

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [CD]
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment-name: production
      environment-url: https://ogeraldoluiz.com
      K8S_NAMESPACE: production

  create-release:
    needs: [deploy-production] # Executa ap√≥s o deploy de produ√ß√£o
    runs-on: ubuntu-latest
    steps:
      # Checkout do reposit√≥rio
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Criar uma nova release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }} # Nome da tag (incremental com base no n√∫mero da execu√ß√£o)
          release_name: 'Release v${{ github.run_number }}' # Nome da release
          body: |
            ## Release Notes
            - Deploy realizado com sucesso para o ambiente de produ√ß√£o.
            - Commit: ${{ github.event.head_commit.message }}
            - Autor: ${{ github.actor }}
          draft: false # Define se a release ser√° um rascunho
          prerelease: false # Define se a release ser√° uma pr√©-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token para autentica√ß√£o

      - name: Delete release branch
        run: |
          git push origin --delete "${BRANCH_NAME}"
          echo "Branch ${BRANCH_NAME} deletada com sucesso."
        env:
          BRANCH_NAME: ${{ env.BRANCH_NAME }}

  notify-discord:
    needs: [deploy-production, deploy-development, deploy-staging]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Discord
        run: |
          ENV=""
          COLOR=""
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            ENV="development"
            COLOR="3447003"  # Azul
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            ENV="staging"
            COLOR="15105570"  # Roxo
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENV="production"
            COLOR="3066993"  # Verde
          fi

          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "üöÄ Novo Deploy Realizado",
                "color": '"$COLOR"',
                "fields": [
                  {
                    "name": "üë§ Autor",
                    "value": "'${{ github.actor }}'",
                    "inline": true
                  },
                  {
                    "name": "‚úâÔ∏è Email",
                    "value": "'${{ github.event.head_commit.author.email }}'",
                    "inline": true
                  },
                  {
                    "name": "üì¶ Reposit√≥rio",
                    "value": "'${{ github.repository }}'",
                    "inline": true
                  },
                  {
                    "name": "üîÄ Branch",
                    "value": "'${{ github.ref_name }}'",
                    "inline": true
                  },
                  {
                    "name": "üí¨ Mensagem do Commit",
                    "value": "'${{ github.event.head_commit.message }}'",
                    "inline": false
                  },
                  {
                    "name": "üìÑ Commit",
                    "value": "'${{ github.sha }}'",
                    "inline": true
                  },
                  {
                    "name": "üìÖ Data",
                    "value": "'${{ github.event.head_commit.timestamp }}'",
                    "inline": true
                  },
                  {
                    "name": "üöÄ Ambiente",
                    "value": '"$ENV"'"
                    "inline": true
                  }

                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
              }]
            }' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
