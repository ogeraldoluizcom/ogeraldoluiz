name: CI/CD Pipeline
run-name: Pipeline CI/CD executed by ${{ github.actor }} in ${{ github.run_number }}

on:
  push:
    branches: [develop]
  # pull_request:
  #   branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Continuous Integration (CI)
  CI:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup Node.js environment
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Cache Node.js dependencies
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Build the application
      - name: Build
        run: npm run build

      # Run linting
      - name: Linting
        run: npm run lint

  # Test
  Tests:
    needs: [CI]
    uses: ./.github/workflows/test.yml
    secrets: inherit

  # Continuous Deployment (CD)
  CD:
    needs: [Tests]
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup DockerHub credentials
      - name: Setup Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: |
            geraldobl58/ogeraldoluiz:v${{ github.run_number }}
            geraldobl58/ogeraldoluiz:latest

  # Deploy
  deploy-development:
    needs: [CD]
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment-name: development
      environment-url: https://development.ogeraldoluiz.com
      K8S_NAMESPACE: development

  deploy-staging:
    needs: [CD]
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment-name: staging
      environment-url: https://staging.ogeraldoluiz.com
      K8S_NAMESPACE: staging

  deploy-production:
    needs: [CD]
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment-name: production
      environment-url: https://ogeraldoluiz.com
      K8S_NAMESPACE: production

  create-release:
    needs: [deploy-production] # Executa após o deploy de produção
    runs-on: ubuntu-latest
    steps:
      # Checkout do repositório
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Criar uma nova release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }} # Nome da tag (incremental com base no número da execução)
          release_name: 'Release v${{ github.run_number }}' # Nome da release
          body: |
            ## Release Notes
            - Deploy realizado com sucesso para o ambiente de produção.
            - Commit: ${{ github.event.head_commit.message }}
            - Autor: ${{ github.actor }}
          draft: false # Define se a release será um rascunho
          prerelease: false # Define se a release será uma pré-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token para autenticação
